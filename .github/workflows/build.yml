name: CI
on:
  push:
    branches:
      - main
    tags:
      - v*

jobs:
  windows-build:
    name: Build app & docs (Windows)
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        python-version: ['3.12']
    outputs:
      x64_hash: ${{ steps.get_hash.outputs.mangadex_dl_x64_hash }}
      x86_hash: ${{ steps.get_hash.outputs.mangadex_dl_x86_hash }}
      x64_file_name: ${{ steps.get_hash.outputs.File_x64 }}
      x86_file_name: ${{ steps.get_hash.outputs.File_x86 }}
    steps:
      - name: Cancel previous runs
        if: startsWith(github.ref, 'refs/tags/')
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}
          all_but_latest: true

      - name: Clone repo
        uses: actions/checkout@v4

      - name: Setup python (x64)
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Setup python (x86)
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x86

      - name: Install required libraries
        run: |
          py -${{ matrix.python-version }}-64 -m pip install -U pip
          py -${{ matrix.python-version }}-64 -m pip install -U wheel pyinstaller setuptools
          py -${{ matrix.python-version }}-64 -m pip install -U .[optional]
          py -${{ matrix.python-version }}-64 -m pip install -U .[docs]
          py -${{ matrix.python-version }}-32 -m pip install -U pip
          py -${{ matrix.python-version }}-32 -m pip install -U wheel pyinstaller setuptools
          py -${{ matrix.python-version }}-32 -m pip install -U .[optional]
          py -${{ matrix.python-version }}-32 -m pip install -U .[docs]

      - name: Test imports
        run: |
          mangadex-dl --version

      - name: Get python version
        run: |
          $PythonVersion = (python --version)
          Write-Output "python_version=${PythonVersion}" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Compile script
        if: contains(env.python_version, '3.12')
        run: |
          py -${{ matrix.python-version }}-64 -m PyInstaller "mangadex-dl_x64.spec" --distpath "./dist_x64"
          py -${{ matrix.python-version }}-32 -m PyInstaller "mangadex-dl_x86.spec" --distpath "./dist_x86"

      - name: Run compiled script
        if: contains(env.python_version, '3.12')
        run: |
          & ".\dist_x64\mangadex-dl_x64\mangadex-dl_x64.exe" --version
          & ".\dist_x86\mangadex-dl_x86\mangadex-dl_x86.exe" --version

      - name: Cleanup build
        if: contains(env.python_version, '3.12')
        run: |
          copy "LICENSE" "dist_x86\mangadex-dl_x86"
          copy "README.md" "dist_x86\mangadex-dl_x86"
          copy "docs\changelog.md" "dist_x86\mangadex-dl_x86"
          echo "${{ github.ref_name }}" | Out-File -FilePath "dist_x86\mangadex-dl_x86\version.txt" -NoNewLine
          echo "mangadex-dl.exe --update" | Out-File -FilePath "dist_x86\mangadex-dl_x86\update.bat"
          echo "start cmd" | Out-File -FilePath "dist_x86\mangadex-dl_x86\start cmd.bat"
          Rename-Item -Path "dist_x86\mangadex-dl_x86\mangadex-dl_x86.exe" -NewName "mangadex-dl.exe"
          Rename-Item -Path "dist_x86\mangadex-dl_x86" -NewName "mangadex-dl"
          Compress-Archive -Path "dist_x86\mangadex-dl" -DestinationPath "mangadex-dl_x86_${{ github.ref_name }}.zip"
          copy "LICENSE" "dist_x64\mangadex-dl_x64"
          copy "README.md" "dist_x64\mangadex-dl_x64"
          copy "docs\changelog.md" "dist_x64\mangadex-dl_x64"
          echo "${{ github.ref_name }}" | Out-File -FilePath "dist_x64\mangadex-dl_x64\version.txt" -NoNewLine
          echo "mangadex-dl.exe --update" | Out-File -FilePath "dist_x64\mangadex-dl_x64\update.bat"
          echo "start cmd" | Out-File -FilePath "dist_x64\mangadex-dl_x64\start cmd.bat"
          Rename-Item -Path "dist_x64\mangadex-dl_x64\mangadex-dl_x64.exe" -NewName "mangadex-dl.exe"
          Rename-Item -Path "dist_x64\mangadex-dl_x64" -NewName "mangadex-dl"
          Compress-Archive -Path "dist_x64\mangadex-dl" -DestinationPath "mangadex-dl_x64_${{ github.ref_name }}.zip"

      - name: Get File hash
        id: get_hash
        if: contains(env.python_version, '3.12')
        run: |
          $File_x86 = "mangadex-dl_x86_${{ github.ref_name }}.zip"
          $File_x64 = "mangadex-dl_x64_${{ github.ref_name }}.zip"
          $Hash_x86 = (Get-FileHash -Algorithm SHA256 $File_x86).Hash.ToLower()
          $Hash_x64 = (Get-FileHash -Algorithm SHA256 $File_x64).Hash.ToLower()
          "mangadex_dl_x64_hash=$Hash_x64" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "mangadex_dl_x86_hash=$Hash_x86" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "File_x64=$File_x64" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "File_x86=$File_x86" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "$File_x64 Hash = $Hash_x64"
          echo "$File_x86 Hash = $Hash_x86"

      - name: Upload artifact (Windows)
        if: contains(env.python_version, '3.12')
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: |
            mangadex-dl_x64_${{ github.ref_name }}.zip
            mangadex-dl_x86_${{ github.ref_name }}.zip

  macos-build:
    name: Build app & docs (macOS)
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        python-version: ['3.12']
    outputs:
      hash: ${{ steps.get_hash.outputs.hash }}
      file_name: ${{ steps.get_hash.outputs.file_name }}
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install required libraries
        run: |
          python -m pip install -U pip
          python -m pip install -U wheel pyinstaller setuptools
          python -m pip install -U .[optional]
          python -m pip install -U .[docs]

      - name: Compile script
        run: |
          python -m PyInstaller "mangadex-dl_x64.spec" --distpath "./dist_macos"

      - name: Run compiled script
        run: |
          ./dist_macos/mangadex-dl_x64/mangadex-dl_x64 --version

      - name: Cleanup build
        run: |
          cp LICENSE dist_macos/mangadex-dl_x64/
          cp README.md dist_macos/mangadex-dl_x64/
          cp docs/changelog.md dist_macos/mangadex-dl_x64/
          echo "${{ github.ref_name }}" > dist_macos/mangadex-dl_x64/version.txt
          echo "./mangadex-dl --update" > dist_macos/mangadex-dl_x64/update.sh
          chmod +x dist_macos/mangadex-dl_x64/update.sh
          echo "open -a Terminal ." > dist_macos/mangadex-dl_x64/start_terminal.command
          chmod +x dist_macos/mangadex-dl_x64/start_terminal.command
          mv dist_macos/mangadex-dl_x64/mangadex-dl_x64 dist_macos/mangadex-dl_x64/mangadex-dl
          mv dist_macos/mangadex-dl_x64 mangadex-dl_macos
          zip -r "mangadex-dl_macos_${{ github.ref_name }}.zip" mangadex-dl_macos

      - name: Get File hash
        id: get_hash
        run: |
          FILE="mangadex-dl_macos_${{ github.ref_name }}.zip"
          HASH=$(shasum -a 256 $FILE | awk '{print $1}')
          echo "hash=${HASH}" >> $GITHUB_OUTPUT
          echo "file_name=${FILE}" >> $GITHUB_OUTPUT
          echo "${FILE} Hash = ${HASH}"

      - name: Upload artifact (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: mangadex-dl_macos_${{ github.ref_name }}.zip

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: [windows-build, macos-build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: mangadex-downloader ${{ github.ref_name }}
          body: |
            ## üçé macOS Setup (First time only)

            macOS blocks apps downloaded from the internet by default. To use mangadex-dl, just run this once in Terminal:

            ```bash
            cd ~/Downloads
            xattr -cr mangadex-dl_macos_${{ github.ref_name }}
            cd mangadex-dl_macos_${{ github.ref_name }}
            ./mangadex-dl --version
            ```

            That's it! The app will work normally after this.

            ------
            ## Files hash
            | Name | SHA-256 |
            | ---- | ------- |
            | ${{ needs.windows-build.outputs.x64_file_name }} | ${{ needs.windows-build.outputs.x64_hash }} |
            | ${{ needs.windows-build.outputs.x86_file_name }} | ${{ needs.windows-build.outputs.x86_hash }} |
            | ${{ needs.macos-build.outputs.file_name }} | ${{ needs.macos-build.outputs.hash }} |

            Binaries for Windows and macOS.
          files: |
            artifacts/windows-builds/*.zip
            artifacts/macos-build/*.zip
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}